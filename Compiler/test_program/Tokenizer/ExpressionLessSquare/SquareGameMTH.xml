<class>
  <keyword> class </keyword>
  <identifier>
    <value>SquareGame</value>
    <category> Class </category>
  </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> field </keyword>
    <identifier> Square </identifier>
    <identifier>
      <value>square</value>
      <category> field </category>
    </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier>
      <value>direction</value>
      <category> field </category>
    </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <identifier> SquareGame </identifier>
    <identifier>
      <value>new</value>
      <category> subroutine </category>
    </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier>
            <value>square</value>
            <category> var </category>
          </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier>
                <value>square</value>
                <category> var </category>
              </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier>
            <value>direction</value>
            <category> var </category>
          </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier>
                <value>direction</value>
                <category> var </category>
              </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier>
                <value>square</value>
                <category> var </category>
              </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier>
      <value>dispose</value>
      <category> subroutine </category>
    </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier>
            <value>square</value>
            <category> class </category>
          </identifier>
          <symbol> . </symbol>
          <identifier>
            <value>dispose</value>
            <category> subroutine </category>
          </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier>
            <value>Memory</value>
            <category> class </category>
          </identifier>
          <symbol> . </symbol>
          <identifier>
            <value>deAlloc</value>
            <category> subroutine </category>
          </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier>
                  <value>square</value>
                  <category> var </category>
                </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier>
      <value>moveSquare</value>
      <category> subroutine </category>
    </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier>
                <value>direction</value>
                <category> var </category>
              </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier>
                <value>square</value>
                <category> class </category>
              </identifier>
              <symbol> . </symbol>
              <identifier>
                <value>moveUp</value>
                <category> subroutine </category>
              </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier>
                <value>direction</value>
                <category> var </category>
              </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier>
                <value>square</value>
                <category> class </category>
              </identifier>
              <symbol> . </symbol>
              <identifier>
                <value>moveDown</value>
                <category> subroutine </category>
              </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier>
                <value>direction</value>
                <category> var </category>
              </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier>
                <value>square</value>
                <category> class </category>
              </identifier>
              <symbol> . </symbol>
              <identifier>
                <value>moveLeft</value>
                <category> subroutine </category>
              </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier>
                <value>direction</value>
                <category> var </category>
              </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier>
                <value>square</value>
                <category> class </category>
              </identifier>
              <symbol> . </symbol>
              <identifier>
                <value>moveRight</value>
                <category> subroutine </category>
              </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier>
            <value>Sys</value>
            <category> class </category>
          </identifier>
          <symbol> . </symbol>
          <identifier>
            <value>wait</value>
            <category> subroutine </category>
          </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier>
                  <value>direction</value>
                  <category> var </category>
                </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier>
      <value>run</value>
      <category> subroutine </category>
    </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> char </keyword>
        <identifier>
          <value>key</value>
          <category> var </category>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> boolean </keyword>
        <identifier>
          <value>exit</value>
          <category> var </category>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier>
            <value>exit</value>
            <category> var </category>
          </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier>
                <value>key</value>
                <category> var </category>
              </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier>
                <value>exit</value>
                <category> var </category>
              </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <whileStatement>
              <keyword> while </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier>
                    <value>key</value>
                    <category> var </category>
                  </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier>
                    <value>key</value>
                    <category> var </category>
                  </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier>
                        <value>key</value>
                        <category> var </category>
                      </identifier>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier>
                    <value>moveSquare</value>
                    <category> subroutine </category>
                  </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </whileStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier>
                    <value>key</value>
                    <category> var </category>
                  </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier>
                    <value>exit</value>
                    <category> var </category>
                  </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier>
                        <value>exit</value>
                        <category> var </category>
                      </identifier>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier>
                    <value>key</value>
                    <category> var </category>
                  </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier>
                    <value>square</value>
                    <category> class </category>
                  </identifier>
                  <symbol> . </symbol>
                  <identifier>
                    <value>decSize</value>
                    <category> subroutine </category>
                  </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier>
                    <value>key</value>
                    <category> var </category>
                  </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier>
                    <value>square</value>
                    <category> class </category>
                  </identifier>
                  <symbol> . </symbol>
                  <identifier>
                    <value>incSize</value>
                    <category> subroutine </category>
                  </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier>
                    <value>key</value>
                    <category> var </category>
                  </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier>
                    <value>direction</value>
                    <category> var </category>
                  </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier>
                        <value>exit</value>
                        <category> var </category>
                      </identifier>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier>
                    <value>key</value>
                    <category> var </category>
                  </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier>
                    <value>direction</value>
                    <category> var </category>
                  </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier>
                        <value>key</value>
                        <category> var </category>
                      </identifier>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier>
                    <value>key</value>
                    <category> var </category>
                  </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier>
                    <value>direction</value>
                    <category> var </category>
                  </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier>
                        <value>square</value>
                        <category> var </category>
                      </identifier>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier>
                    <value>key</value>
                    <category> var </category>
                  </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier>
                    <value>direction</value>
                    <category> var </category>
                  </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier>
                        <value>direction</value>
                        <category> var </category>
                      </identifier>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <whileStatement>
              <keyword> while </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier>
                    <value>key</value>
                    <category> var </category>
                  </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier>
                    <value>key</value>
                    <category> var </category>
                  </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier>
                        <value>key</value>
                        <category> var </category>
                      </identifier>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier>
                    <value>moveSquare</value>
                    <category> subroutine </category>
                  </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </whileStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
